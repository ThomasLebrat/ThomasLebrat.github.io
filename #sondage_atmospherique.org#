

* test 0

#+BEGIN_SRC emacs-lisp
(emacs-version) 
#+END_SRC


#+BEGIN_SRC jupyter-python :results value
for i in range(3):
    print(i)
#+END_SRC

#+RESULTS:
:RESULTS:
0
1
2
:END:


** getting help

C-c C-c
M-i (inspect)

#+BEGIN_SRC jupyter-python
import numpy as np
?np.linspace
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
np.g
#+END_SRC

#+RESULTS:
:RESULTS:
<module 'numpy' from '/home/maint/.local/lib/python3.8/site-packages/numpy/__init__.py'>
:END:

** scratch

#+BEGIN_SRC jupyter-python
print(3)
3+4

#+END_SRC



** plotting 

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import numpy as np

t = np.linspace(0, 20 * np.pi, 300)
x = np.exp(-0.1 * np.sqrt(t/2) ) *  np.sin(t)
y = np.exp(-0.1 * np.sqrt(t) ) *  np.cos(t)

plt.plot(x,y)
plt.figure
plt.axis('equal')

print('length of t = {}'.format(len(t)))

np.linspace

#+END_SRC

#+RESULTS:
:RESULTS:
length of t = 300
[[file:./.ob-jupyter/46709da177c304e6c9a1b095ce9ce55b0d257f97.png]]
:END:


** plotly

#+BEGIN_SRC jupyter-python
from pycse.plotly import *
import plotly.express as px

df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color ="species",
                 size ="petal_length", hover_data=['petal_width'])
fig.show()
#+END_SRC


#+BEGIN_SRC emacs-lisp :results pp
org-babel-default-header-args:jupyter-python
#+END_SRC

#+RESULTS:
#+begin_example
((:results . "both")
 (:session . "jupyter-python")
 (:kernel . "python3")
 (:pandoc . "t")
 (:exports . "both")
 (:cache . "no")
 (:noweb . "no")
 (:hlines . "no")
 (:tangle . "no")
 (:eval . "never-export"))
#+end_example


#+BEGIN_SRC jupyter-python
import pycse.orgmode as org
import matplotlib.pyplot as plt

data = [['x', 'y'], None, [1, 2], [2, 4]]
org.table(data, name='table-data', caption='Data from a python table')

print()

plt.plot([4, 5, 6])
org.figure(plt.savefig('images/a-figure.png'), name='fig:1', caption='A figure in org-mode')
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]

AttributeErrorTraceback (most recent call last)
<ipython-input-4-af6cf6bf56e5> in <module>
      3 
      4 data = [['x', 'y'], None, [1, 2], [2, 4]]
----> 5 org.table(data, name='table-data', caption='Data from a python table')
      6 
      7 print()

AttributeError: module 'pycse.orgmode' has no attribute 'table'
:END:


*** test pyces
#+BEGIN_SRC jupyter-python
from pycse.plotly import *

import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color = "species", size = "petal_length", hover_data=['petal_width'])

fig.show()

#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]

TypeErrorTraceback (most recent call last)
<ipython-input-1-0de3666b2768> in <module>
      5 fig = px.scatter(df, x="sepal_width", y="sepal_length", color = "species", size = "petal_length", hover_data=['petal_width'])
      6 
----> 7 fig.show()

~/.local/lib/python3.8/site-packages/pycse/plotly.py in myshow(self, *args, **kwargs)
     28         f.write(html)
     29 
---> 30     display(FileLink(fhtml, result_html_suffix=""))
     31 
     32     return Image(pio.to_image(self, "png", engine="kaleido"))

TypeError: 'module' object is not callable
:END:
























* test

#+NAME: tabtest
| toto | tata |
|    1 |    2 |
| 3.14 | 6.28 |


#+BEGIN_SRC python :var tbl=tabtest :results output
print(tabtest)
#+END_SRC

#+RESULTS:


** réglages


#+NAME: mydata
| Drug | Patients |
|------+----------|
| X    |      232 |
| Y    |      3?1 |
| Z    |      123 |

#+begin_src python :var tbl=mydata :results output
print(tbl)
#+end_src

#+RESULTS:
: [['X', 232], ['Y', '3?1'], ['Z', 123]]



* TP


** saisie du tableau 
#+NAME: temp
| z(km) | T(°C) |
|-------+-------|
|     0 |    15 |
|     5 |   -18 |
|    10 |   -49 |
|    12 |   -56 |
|    20 |   -56 |
|    25 |   -46 |
|    30 |   -37 |
|    35 |   -22 |
|    40 |    -8 |
|    45 |    -2 |
|    48 |    -2 |
|    52 |    -7 |
|    55 |   -17 |
|    60 |   -33 |
|    65 |   -54 |
|    70 |   -65 |
|    75 |   -79 |
|    80 |   -86 |
|    84 |   -86 |
|    92 |   -86 |
|    95 |   -81 |
|   100 |   -72 |



#+BEGIN_SRC jupyter-python :var tbl=temp :results output
print(tbl[:][1])
#+END_SRC

#+RESULTS:
:RESULTS:
[5, -18]
:END:


*** parenthese pandas
    
#+begin_src jupyter-python :var tbl=temp :results output
import pandas as pd
D = pd.DataFrame(tbl).iloc[:, :]
print(D)
#+end_src

#+RESULTS:
:RESULTS:
      0   1
0     0  15
1     5 -18
2    10 -49
3    12 -56
4    20 -56
5   -51 -46
6    30 -37
7    35 -22
8    40  -8
9    45  -2
10   48  -2
11   52  -7
12   55 -17
13   60 -33
14   65 -54
15   70 -65
16   75 -79
17   80 -86
18   84 -86
19   92 -86
20   95 -81
21  100 -72
:END:

#+begin_src jupyter-python :var tbl=temp :results output
import pandas as pd
D = pd.DataFrame(tbl).iloc[:, 1:3]
print(D)
#+end_src

#+RESULTS:
:RESULTS:
     1
0   15
1  -18
2  -49
3  -56
4  -56
5  -46
6  -37
7  -22
8   -8
9   -2
10  -2
11  -7
12 -17
13 -33
14 -54
15 -65
16 -79
17 -86
18 -86
19 -86
20 -81
21 -72
:END:


#+BEGIN_SRC jupyter-python
#Altitude
print(D)
#+END_SRC

#+RESULTS:
:RESULTS:
     1
0   15
1  -18
2  -49
3  -56
4  -56
5  -46
6  -37
7  -22
8   -8
9   -2
10  -2
11  -7
12 -17
13 -33
14 -54
15 -65
16 -79
17 -86
18 -86
19 -86
20 -81
21 -72
:END:




** import des librairies

#+BEGIN_SRC jupyter-python
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import json
import csv
#+END_SRC

#+RESULTS:

** values
#+BEGIN_SRC jupyter-python
M = 29.0e-3
R = 8.31

P0 = 1.0e5
g0 = 9.8

RT = 6.4e3
pi = np.pi
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python

data = {
    "president": {
        "name": "Zaphod Beeblebrox",
        "species": "Betelgeusian"
    }
}


with open("data_file.json", "w") as write_file:
    json.dump(data, write_file)

#+END_SRC

#+BEGIN_SRC jupyter-python
with open("randomfile.csv") as file_name:
    file_read = csv.reader(file_name)

array = list(file_read)
 
print(array)
#+END_SRC


#+BEGIN_SRC jupyter-python
import numpy as np

with open("randomfile.csv") as file_name:
    array = np.loadtxt(file_name, delimiter=",")

print(array)


#+END_SRC



#+RESULTS:
:RESULTS:
[[ 1.  2.]
 [ 2.  4.]
 [ 3.  6.]
 [ 4.  8.]
 [ 5. 11.]
 [ 6. 13.]
 [ 7.  4.]
 [ 8. 13.]]
:END:

#+BEGIN_SRC jupyter-python
zexp = np.array([0.0, 5.0, 10.0, 12.0, 20.0, 25.0, 30.0, 35.0, 40.0, 45.0, 48.0, 52.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 84.0, 92.0, 95.0, 100.0])

Texp = np.array([15.0, -18.0, -49.0, -56.0, -56.0, -51.0, -46.0, -37.0, -22.0, -8.0, -2.0, -2.0, -7.0, -17.0, -33.0, -54.0, -65.0, -79.0, -86.0, -86.0, -81.0, -72.0])

# print(len(zexp))
# print(len(Texp))
# print(zexp)
# print(Texp)
#+END_SRC

#+RESULTS:


** interpolation 
On considère deux points de mesure $i$ et $i+1$, on a la relation $$T_k = a z_k +b $$ avec $a$ et $b$ indéterminés. Evcrivons la relation de la température en $k=i$ et $k=i+1$

#+BEGIN_SRC jupyter-python
def T(z,unite):
    z_km = z / 1000 #conversion
    alpha = 1 # facteur de conversion
    
    if unite == 'C':
        alpha = 0
        
    i = 0
    while z_km > zexp[i+1]: # recherche de l'indice i
        i = i + 1
        
    rate =  ( Texp[i+1] - Texp[i] ) / ( zexp[i+1] - zexp[i] )
    temperature = alpha*273 + Texp[i] + rate * (z_km - zexp[i])
    return temperature

#+END_SRC

#+RESULTS:


** gravity
#+BEGIN_SRC jupyter-python
def g(z):
    return g0 * RT**2 / (RT + z)**2
#+END_SRC

#+RESULTS:


** temperature
#+BEGIN_SRC jupyter-python :results output
N = 1000
zmax = 100.0e3
dz = zmax / (N-1)
print(N, zmax, dz)
zatm = np.array([ k * dz for k in range(N) ])
Tatm = np.array([ T(zatm[k], 'C') for k in range(N) ])
TatmK = np.array([ T(zatm[k], 'K') for k in range(N) ])
gatm = np.array([ g(zatm[k]) for k in range(N)])
#+END_SRC

#+RESULTS:
:RESULTS:
1000 100000.0 100.10010010010011
:END:

#+BEGIN_SRC jupyter-python
fig, ax = plt.subplots()
ax.plot( TatmK,zatm)
ax.plot( Tatm,zatm)
plt.savefig("ffffffffff")
#+END_SRC


#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/ddb61d97953cb9f84965f5198e45a9d658967ac2.png]]
:END:


** pressure
calcul du champ de pression par la méthode d'Euler
#+BEGIN_SRC jupyter-python
Patm = [P0]
gatm = [g0]
deltap = 0
gradient = 0
for k in range(N-1):
    gradient = - M * g( zatm[k] ) / (R * TatmK[k] )
    deltap = gradient * dz
    Patm.append( Patm[k] + deltap )
#    gatm.append( gatm[k] )
Patm = np.array(Patm)
print(M,R,P0,g0,RT)


#+END_SRC

#+BEGIN_SRC jupyter-python
print(Tatm[:])
#+END_SRC



#+RESULTS:
:RESULTS:
[ 15.          14.33933934  13.67867868  13.01801802  12.35735736
  11.6966967   11.03603604  10.37537538   9.71471471   9.05405405
   8.39339339   7.73273273   7.07207207   6.41141141   5.75075075
   5.09009009   4.42942943   3.76876877   3.10810811   2.44744745
   1.78678679   1.12612613   0.46546547  -0.1951952   -0.85585586
  -1.51651652  -2.17717718  -2.83783784  -3.4984985   -4.15915916
  -4.81981982  -5.48048048  -6.14114114  -6.8018018   -7.46246246
  -8.12312312  -8.78378378  -9.44444444 -10.10510511 -10.76576577
 -11.42642643 -12.08708709 -12.74774775 -13.40840841 -14.06906907
 -14.72972973 -15.39039039 -16.05105105 -16.71171171 -17.37237237
 -18.03103103 -18.65165165 -19.27227227 -19.89289289 -20.51351351
 -21.13413413 -21.75475475 -22.37537538 -22.995996   -23.61661662
 -24.23723724 -24.85785786 -25.47847848 -26.0990991  -26.71971972
 -27.34034034 -27.96096096 -28.58158158 -29.2022022  -29.82282282
 -30.44344344 -31.06406406 -31.68468468 -32.30530531 -32.92592593
 -33.54654655 -34.16716717 -34.78778779 -35.40840841 -36.02902903
 -36.64964965 -37.27027027 -37.89089089 -38.51151151 -39.13213213
 -39.75275275 -40.37337337 -40.99399399 -41.61461461 -42.23523524
 -42.85585586 -43.47647648 -44.0970971  -44.71771772 -45.33833834
 -45.95895896 -46.57957958 -47.2002002  -47.82082082 -48.44144144
 -49.03503504 -49.38538539 -49.73573574 -50.08608609 -50.43643644
 -50.78678679 -51.13713714 -51.48748749 -51.83783784 -52.18818819
 -52.53853854 -52.88888889 -53.23923924 -53.58958959 -53.93993994
 -54.29029029 -54.64064064 -54.99099099 -55.34134134 -55.69169169
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -56.         -56.         -56.         -56.         -56.
 -55.97997998 -55.87987988 -55.77977978 -55.67967968 -55.57957958
 -55.47947948 -55.37937938 -55.27927928 -55.17917918 -55.07907908
 -54.97897898 -54.87887888 -54.77877878 -54.67867868 -54.57857858
 -54.47847848 -54.37837838 -54.27827828 -54.17817818 -54.07807808
 -53.97797798 -53.87787788 -53.77777778 -53.67767768 -53.57757758
 -53.47747748 -53.37737738 -53.27727728 -53.17717718 -53.07707708
 -52.97697698 -52.87687688 -52.77677678 -52.67667668 -52.57657658
 -52.47647648 -52.37637638 -52.27627628 -52.17617618 -52.07607608
 -51.97597598 -51.87587588 -51.77577578 -51.67567568 -51.57557558
 -51.47547548 -51.37537538 -51.27527528 -51.17517518 -51.07507508
 -50.97497497 -50.87487487 -50.77477477 -50.67467467 -50.57457457
 -50.47447447 -50.37437437 -50.27427427 -50.17417417 -50.07407407
 -49.97397397 -49.87387387 -49.77377377 -49.67367367 -49.57357357
 -49.47347347 -49.37337337 -49.27327327 -49.17317317 -49.07307307
 -48.97297297 -48.87287287 -48.77277277 -48.67267267 -48.57257257
 -48.47247247 -48.37237237 -48.27227227 -48.17217217 -48.07207207
 -47.97197197 -47.87187187 -47.77177177 -47.67167167 -47.57157157
 -47.47147147 -47.37137137 -47.27127127 -47.17117117 -47.07107107
 -46.97097097 -46.87087087 -46.77077077 -46.67067067 -46.57057057
 -46.47047047 -46.37037037 -46.27027027 -46.17017017 -46.07007007
 -45.94594595 -45.76576577 -45.58558559 -45.40540541 -45.22522523
 -45.04504505 -44.86486486 -44.68468468 -44.5045045  -44.32432432
 -44.14414414 -43.96396396 -43.78378378 -43.6036036  -43.42342342
 -43.24324324 -43.06306306 -42.88288288 -42.7027027  -42.52252252
 -42.34234234 -42.16216216 -41.98198198 -41.8018018  -41.62162162
 -41.44144144 -41.26126126 -41.08108108 -40.9009009  -40.72072072
 -40.54054054 -40.36036036 -40.18018018 -40.         -39.81981982
 -39.63963964 -39.45945946 -39.27927928 -39.0990991  -38.91891892
 -38.73873874 -38.55855856 -38.37837838 -38.1981982  -38.01801802
 -37.83783784 -37.65765766 -37.47747748 -37.2972973  -37.11711712
 -36.89489489 -36.59459459 -36.29429429 -35.99399399 -35.69369369
 -35.39339339 -35.09309309 -34.79279279 -34.49249249 -34.19219219
 -33.89189189 -33.59159159 -33.29129129 -32.99099099 -32.69069069
 -32.39039039 -32.09009009 -31.78978979 -31.48948949 -31.18918919
 -30.88888889 -30.58858859 -30.28828829 -29.98798799 -29.68768769
 -29.38738739 -29.08708709 -28.78678679 -28.48648649 -28.18618619
 -27.88588589 -27.58558559 -27.28528529 -26.98498498 -26.68468468
 -26.38438438 -26.08408408 -25.78378378 -25.48348348 -25.18318318
 -24.88288288 -24.58258258 -24.28228228 -23.98198198 -23.68168168
 -23.38138138 -23.08108108 -22.78078078 -22.48048048 -22.18018018
 -21.88788789 -21.60760761 -21.32732733 -21.04704705 -20.76676677
 -20.48648649 -20.20620621 -19.92592593 -19.64564565 -19.36536537
 -19.08508509 -18.8048048  -18.52452452 -18.24424424 -17.96396396
 -17.68368368 -17.4034034  -17.12312312 -16.84284284 -16.56256256
 -16.28228228 -16.002002   -15.72172172 -15.44144144 -15.16116116
 -14.88088088 -14.6006006  -14.32032032 -14.04004004 -13.75975976
 -13.47947948 -13.1991992  -12.91891892 -12.63863864 -12.35835836
 -12.07807808 -11.7977978  -11.51751752 -11.23723724 -10.95695696
 -10.67667668 -10.3963964  -10.11611612  -9.83583584  -9.55555556
  -9.27527528  -8.99499499  -8.71471471  -8.43443443  -8.15415415
  -7.90990991  -7.70970971  -7.50950951  -7.30930931  -7.10910911
  -6.90890891  -6.70870871  -6.50850851  -6.30830831  -6.10810811
  -5.90790791  -5.70770771  -5.50750751  -5.30730731  -5.10710711
  -4.90690691  -4.70670671  -4.50650651  -4.30630631  -4.10610611
  -3.90590591  -3.70570571  -3.50550551  -3.30530531  -3.10510511
  -2.9049049   -2.7047047   -2.5045045   -2.3043043   -2.1041041
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.          -2.          -2.          -2.          -2.
  -2.08675342  -2.25358692  -2.42042042  -2.58725392  -2.75408742
  -2.92092092  -3.08775442  -3.25458792  -3.42142142  -3.58825492
  -3.75508842  -3.92192192  -4.08875542  -4.25558892  -4.42242242
  -4.58925592  -4.75608942  -4.92292292  -5.08975642  -5.25658992
  -5.42342342  -5.59025692  -5.75709042  -5.92392392  -6.09075742
  -6.25759092  -6.42442442  -6.59125792  -6.75809142  -6.92492492
  -7.11011011  -7.31031031  -7.51051051  -7.71071071  -7.91091091
  -8.11111111  -8.31131131  -8.51151151  -8.71171171  -8.91191191
  -9.11211211  -9.31231231  -9.51251251  -9.71271271  -9.91291291
 -10.11311311 -10.31331331 -10.51351351 -10.71371371 -10.91391391
 -11.11411411 -11.31431431 -11.51451451 -11.71471471 -11.91491491
 -12.11511512 -12.31531532 -12.51551552 -12.71571572 -12.91591592
 -13.11611612 -13.31631632 -13.51651652 -13.71671672 -13.91691692
 -14.11711712 -14.31731732 -14.51751752 -14.71771772 -14.91791792
 -15.11811812 -15.31831832 -15.51851852 -15.71871872 -15.91891892
 -16.11911912 -16.31931932 -16.51951952 -16.71971972 -16.91991992
 -17.19219219 -17.51251251 -17.83283283 -18.15315315 -18.47347347
 -18.79379379 -19.11411411 -19.43443443 -19.75475475 -20.07507508
 -20.3953954  -20.71571572 -21.03603604 -21.35635636 -21.67667668
 -21.996997   -22.31731732 -22.63763764 -22.95795796 -23.27827828
 -23.5985986  -23.91891892 -24.23923924 -24.55955956 -24.87987988
 -25.2002002  -25.52052052 -25.84084084 -26.16116116 -26.48148148
 -26.8018018  -27.12212212 -27.44244244 -27.76276276 -28.08308308
 -28.4034034  -28.72372372 -29.04404404 -29.36436436 -29.68468468
 -30.00500501 -30.32532533 -30.64564565 -30.96596597 -31.28628629
 -31.60660661 -31.92692693 -32.24724725 -32.56756757 -32.88788789
 -33.27327327 -33.69369369 -34.11411411 -34.53453453 -34.95495495
 -35.37537538 -35.7957958  -36.21621622 -36.63663664 -37.05705706
 -37.47747748 -37.8978979  -38.31831832 -38.73873874 -39.15915916
 -39.57957958 -40.         -40.42042042 -40.84084084 -41.26126126
 -41.68168168 -42.1021021  -42.52252252 -42.94294294 -43.36336336
 -43.78378378 -44.2042042  -44.62462462 -45.04504505 -45.46546547
 -45.88588589 -46.30630631 -46.72672673 -47.14714715 -47.56756757
 -47.98798799 -48.40840841 -48.82882883 -49.24924925 -49.66966967
 -50.09009009 -50.51051051 -50.93093093 -51.35135135 -51.77177177
 -52.19219219 -52.61261261 -53.03303303 -53.45345345 -53.87387387
 -54.15415415 -54.37437437 -54.59459459 -54.81481481 -55.03503504
 -55.25525526 -55.47547548 -55.6956957  -55.91591592 -56.13613614
 -56.35635636 -56.57657658 -56.7967968  -57.01701702 -57.23723724
 -57.45745746 -57.67767768 -57.8978979  -58.11811812 -58.33833834
 -58.55855856 -58.77877878 -58.998999   -59.21921922 -59.43943944
 -59.65965966 -59.87987988 -60.1001001  -60.32032032 -60.54054054
 -60.76076076 -60.98098098 -61.2012012  -61.42142142 -61.64164164
 -61.86186186 -62.08208208 -62.3023023  -62.52252252 -62.74274274
 -62.96296296 -63.18318318 -63.4034034  -63.62362362 -63.84384384
 -64.06406406 -64.28428428 -64.5045045  -64.72472472 -64.94494494
 -65.21021021 -65.49049049 -65.77077077 -66.05105105 -66.33133133
 -66.61161161 -66.89189189 -67.17217217 -67.45245245 -67.73273273
 -68.01301301 -68.29329329 -68.57357357 -68.85385385 -69.13413413
 -69.41441441 -69.69469469 -69.97497497 -70.25525526 -70.53553554
 -70.81581582 -71.0960961  -71.37637638 -71.65665666 -71.93693694
 -72.21721722 -72.4974975  -72.77777778 -73.05805806 -73.33833834
 -73.61861862 -73.8988989  -74.17917918 -74.45945946 -74.73973974
 -75.02002002 -75.3003003  -75.58058058 -75.86086086 -76.14114114
 -76.42142142 -76.7017017  -76.98198198 -77.26226226 -77.54254254
 -77.82282282 -78.1031031  -78.38338338 -78.66366366 -78.94394394
 -79.14014014 -79.31531532 -79.49049049 -79.66566567 -79.84084084
 -80.01601602 -80.19119119 -80.36636637 -80.54154154 -80.71671672
 -80.89189189 -81.06706707 -81.24224224 -81.41741742 -81.59259259
 -81.76776777 -81.94294294 -82.11811812 -82.29329329 -82.46846847
 -82.64364364 -82.81881882 -82.99399399 -83.16916917 -83.34434434
 -83.51951952 -83.69469469 -83.86986987 -84.04504505 -84.22022022
 -84.3953954  -84.57057057 -84.74574575 -84.92092092 -85.0960961
 -85.27127127 -85.44644645 -85.62162162 -85.7967968  -85.97197197
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -86.         -86.         -86.         -86.         -86.
 -85.84651318 -85.67967968 -85.51284618 -85.34601268 -85.17917918
 -85.01234568 -84.84551218 -84.67867868 -84.51184518 -84.34501168
 -84.17817818 -84.01134468 -83.84451118 -83.67767768 -83.51084418
 -83.34401068 -83.17717718 -83.01034368 -82.84351018 -82.67667668
 -82.50984318 -82.34300968 -82.17617618 -82.00934268 -81.84250918
 -81.67567568 -81.50884218 -81.34200868 -81.17517518 -81.00834168
 -80.82882883 -80.64864865 -80.46846847 -80.28828829 -80.10810811
 -79.92792793 -79.74774775 -79.56756757 -79.38738739 -79.20720721
 -79.02702703 -78.84684685 -78.66666667 -78.48648649 -78.30630631
 -78.12612613 -77.94594595 -77.76576577 -77.58558559 -77.40540541
 -77.22522523 -77.04504505 -76.86486486 -76.68468468 -76.5045045
 -76.32432432 -76.14414414 -75.96396396 -75.78378378 -75.6036036
 -75.42342342 -75.24324324 -75.06306306 -74.88288288 -74.7027027
 -74.52252252 -74.34234234 -74.16216216 -73.98198198 -73.8018018
 -73.62162162 -73.44144144 -73.26126126 -73.08108108 -72.9009009
 -72.72072072 -72.54054054 -72.36036036 -72.18018018 -72.        ]
:END:

# #+BEGIN_SRC jupyter-python
# fig, ax = plt.subplots()
# ax.plot( Patm,zatm)
# #plt.savefig("ffffffffff")
# #+END_SRC

#+BEGIN_SRC jupyter-python :results output
plt.plot(Patm,zatm)
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/6ab5d538c5d7f7e5a4224a6939d11097f5fb56d1.png]]
:END:


** masse d'air

calcul de la masse d'air par la méthode des rectangles
situé entre deux sphères d'altitude z et z+dz

#+BEGIN_SRC jupyter-python  :results output
def masse_atm(z):
    masse = 0
    k = 0
    
    Cte = 4*pi*M/R
    while zatm[k] < z:
        dm = Cte * dz * (RT + z)**2 * Patm[k] / T(zatm[k],'K')
        masse = masse + dm
        k = k+1
    return masse
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python

mtot = masse_atm(100e3)
print(mtot)

#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]

TypeErrorTraceback (most recent call last)
<ipython-input-40-503d0e3d66ad> in <module>
----> 1 mtot = masse_atm(100e3)
      2 print(mtot)

<ipython-input-39-9600ce6d6b7b> in masse_atm(z)
      4     Cte = 4*np.pi*M/R
      5     while zatm[k] < z:
----> 6         dm = Cte * dz  (RT + z)**2 * Patm[k] / T(zatm[k],'K')
      7         masse = masse + dm
      8         k = k+1

TypeError: 'float' object is not callable
:END:



#+BEGIN_SRC jupyter-python  

#+END_SRC

** next


* export to ipynb

#+BEGIN_SRC emacs-lisp

(setq org-export-with-broken-links t)
(ox-ipynb-export-to-ipynb-file-and-open)

#+END_SRC
