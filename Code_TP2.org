#+TITLE: CODE TP 2
#+DATE: <2023-02-01 mer.>


* préparatifs

#+BEGIN_SRC jupyter-python
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
#+END_SRC

#+RESULTS:


#+BEGIN_SRC jupyter-python
G = 6.67e-11 # Constante de gravitation universelle (m**3/kg/s²)
M = 6.00e24 # Masse de la Terre (kg)
RT = 6.40e6 # Rayon de la Terre (m)
TTerre = 24 * 3600 # Période de rotation de la Terre (s)


r1 = 8400e3
v1 = 6000

m = 5e3
#+END_SRC

#+RESULTS:

* Q1                                                                :TABLEAU:

* Q2                                                                :TABLEAU:

* Q3

#+BEGIN_SRC jupyter-python
def trace_cercle(R, style, e):
    n = 1000 # Nombre de points à tracer
    dtheta = 2*np.pi/(n - 1)
    theta = np.array([i*dtheta for i in range(n)]) # Angle entre 0 et 2*pi
    xC = R * np.cos(theta)
    yC = R * np.sin(theta)
    plt.plot(xC, yC, style, lw=e)

    
    return None

#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
plt.axis('equal') # Permet d’avoir des cercles de forme circulaire!!
trace_cercle(RT, 'b-', 2) # On trace la Terre
trace_cercle(r1, 'k--', 1) # On trace l'orbite basse
#+END_SRC


#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/3b8e8008d522896cdb0fcad3131a09a879eee2e5.png]]
:END:



#+BEGIN_SRC jupyter-python  

#+END_SRC

#+RESULTS:

* Q4

#+BEGIN_SRC jupyter-python

def Fg(x, y): # Force de gravitation exercée par la Terre
    Fx = -G*M*m*x/(x**2 + y**2)**(3/2)
    Fy = -G*M*m*y/(x**2 + y**2)**(3/2)
    return Fx, Fy


#+END_SRC

#+RESULTS:



* Q5

#+BEGIN_SRC jupyter-python

def crash(x, y):
    if np.sqrt(x**2 + y**2) <= RT:
        return True
    else:
        return False

#+END_SRC

#+RESULTS:



* Q6

#+BEGIN_SRC jupyter-python

def instants(tmin, tmax, N):
    dt=(tmax - tmin)/(N - 1) # Pas de temps
    return np.array([tmin + i*dt for i in range(N)])

#+END_SRC

#+RESULTS:


* Q7

#+BEGIN_SRC jupyter-python
Y0 = [r1, 0, 0, v1] # Conditions initiales
#+END_SRC

#+RESULTS:

* Q8 

#+BEGIN_SRC jupyter-python
def dynamique(Y, t):
    x, y, vx, vy = Y # On récupère la position et la vitesse
    Fx, Fy = Fg(x, y) # Composantes de la force
    ax = Fx / m # Composante de l’accélération sur ex
    ay = Fy / m # et sur ey
    return np.array([vx, vy, ax, ay])
#+END_SRC

#+RESULTS:


* Q9

* Q10

#+BEGIN_SRC jupyter-python

def calcul_trajectoire(f, Y0, t): # Trajectoire par la méthode d'Euler
    N = len(t)
    Y = [Y0] # Y est le tableau de résultats contenant les vecteurs Y[i]
    x, y, vx, vy = Y0 # Conditions initiales
    i = 0
    while (i < N-1) and not(crash(x, y)):
        dt = t[i + 1] - t[i]
        dY_dt = f(Y[i], t[i])
        Y.append(Y[i] + dt*dY_dt)
        x, y, vx, vy = Y[i+1]
        i = i + 1
    if crash(x, y):
        print('Crash sur la Terre après', round(temps[len(Y)],2), 's')
    return np.array(Y)


#+END_SRC

#+RESULTS:

* Q11

#+BEGIN_SRC jupyter-python
T1   = 4650

tmax = T1

N = 10000 # Nombre de points de calcul
temps = instants(0, tmax, N)
#+END_SRC

#+RESULTS:

* Q12

#+BEGIN_SRC jupyter-python
solution = calcul_trajectoire(dynamique, Y0, temps) # Méthode d'Euler

x = solution[:, 0]
y = solution[:, 1]
vx = solution[:, 2]
vy = solution[:, 3]

print(x)
#+END_SRC

#+RESULTS:
:RESULTS:
Crash sur la Terre après 1777.87 s
[8400000.         8400000.         8399998.7733765  ...  200312.43349937
  196621.93255872  192931.36552774]
:END:

* Q13 

#+BEGIN_SRC jupyter-python

v1 = 300.0 # Vitesse (m/s)


plt.plot(x, y, 'r-', lw=2) # On trace la trajectoire

#+END_SRC

#+RESULTS:
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7f36fa5a7ac0> |
[[file:./.ob-jupyter/8f7b0fdee3bc8607ce185fd9ade0743a62d718a4.png]]
:END:

