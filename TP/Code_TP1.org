#+TITLE: Structure Thermique de l'atmopshère
#+AUTHOR: Thomas Lebrat
#+DATE: <2023-02-01 mer.>

#+OPTIONS: d:nil

:tiroir:
# #+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup
# #+SETUPFILE: file:///~/org-html-themes/org/theme-readtheorg-local.setup
:end:


* Introduction

Un ballon-sonde mesure les caractéristiques de l'atmosphère à l'aide d'instruments embarqués. Les données obtenues en fonction de l'altitude sont renvoyées au sol par signal radio. L'importance de ces données /in situ/ est cruciale pour affiner les modèles physiques de l'atmosphère utilisés en météorologie et notamment /calibrer/ les mesures réalisées par satellite à des fin de télédétection.

Les altitudes maximales atteintes sont variables : cela dépend des modèles, en particulier si le ballon est ouvert ou fermé. On retient  une valeur approchée de $50~km$ pour cette altitude plafond. Cet ordre de grandeur est-il bien réaliste ? Pourquoi une telle limite : quels sont les mécanismes physiques qui contrôlent le déclenchement et la statbilisation de l'ascension ?



** Objectifs de l'activité et compétences travaillées

Nous fournissons une vingtaine de valeurs de température. Ces données ont été analysées lors de la premimère séance (voir le tableau commenté en section suivante).

Les questions Q1 à Q12 vous guident pour atteindre les 3 ojectifs principaux de cette activité : 

1) Construire des profils verticaux $\rightarrow$ identifier les couches atmosphériques
2) Déterminer un profil de pression $\looparrowright$ 100 km tenant compte de $\Delta T$
3) Discuter la pertinence du choix de certaines hypothèses (iso-g, iso-T)

Une participation active et constructive est toujours bienvenue et valorisée. Vous êtes autorisés (et encouragés !) à nous solliciter pour nous soumettre vos questions scientifiques (ex: /Mais c'est quoi un gradient adiabatique ?/) ou techniques (ex: /Comment faire converger mon algorithme efficacement ?/). 

Voici une liste des compétences travaillées dans ce TP : 

- Implémenter des méthodes numériques simples : *interpolation* et *intégration*
- Comprendre le principe de la *régression*, technique fondamentale pour les méthodes de sondage
- Explorer quelques possibités du language ~Python~ + ~numpy~ 

Remarque : avec l'utilisation de ~Matplotlib~ la syntaxe est assez proche de ~MATLAB~

Accéssoirement, vous pourrez utiliser des librairies spécialisées telles que ~scipy~, ~pandas~, ~plotly~ (...) et d'autres outils que vous aimeriez partager s'il permettent de gagner du temps de développement ou du temps de calcul.



** Documentation et remerciements

*** TODO biblio
    :PROPERTIES:  
    :UNNUMBERED: t
    :END:  
  Cette activité est inspirée des documents suivants (liste à compléter)
 
 + [[https://labolycee.org/mecanique-du-vol-dun-ballon-sonde][Exo Bac]]
 + [[http://www.msc.univ-paris-diderot.fr/~phyexp/pmwiki.php/Convention/ConvectionEtPanacheThermique][Images de panaches thermiques (UP7)]]
 + [[https://web.archive.org/web/20081119164748/http://www.meteofrance.com/FR/glossaire/designation/693_initie_view.jsp][Glossaire Meteo France]]
 + [[http://b.louchart.free.fr/Concours_et_examens/Centrale_Supelec/Sujets/2008_TSI_Physique_1.html][Sujet Concours TSI 2008]]
 + [[https://planet-terre.ens-lyon.fr/ressource/mouvts-enveloppes-fluides2.xml][Site Planète Terre ENS Lyon]]

*** TODO nommenclature et origine des noms des couches
:PROPERTIES:  
    :UNNUMBERED: t
    :END:      




** Tableau commenté

#+BEGIN_EXPORT latex
Voici le profil vertical avec une petite une visualisation ~ASCII~ artisanale\footnote{Depuis Emacs(org-mode), on applique la formule :  \#+TBLFM: ~\$4='(orgtbl-ascii-draw \$3 175 290)~}. 
#+END_EXPORT


 | z(km) | T(°C) | T(K) | T (ASCII Profile) |
 |-------+-------+------+-------------------|
 |   100 |   -72 |  201 | ▉▉▋               |
 |    95 |   -81 |  192 | ▉▋                |
 |    92 |   -86 |  187 | ▉▎                |
 |    84 |   -86 |  187 | ▉▎                |
 |    80 |   -86 |  187 | ▉▎                |
 |    75 |   -79 |  194 | ▉▉                |
 |    70 |   -65 |  208 | ▉▉▉▍              |
 |    65 |   -54 |  219 | ▉▉▉▉▌             |
 |    60 |   -33 |  240 | ▉▉▉▉▉▉▋           |
 |    55 |   -17 |  256 | ▉▉▉▉▉▉▉▉▍         |
 |    52 |    -7 |  266 | ▉▉▉▉▉▉▉▉▉▍        |
 |    48 |    -2 |  271 | ▉▉▉▉▉▉▉▉▉▉        |
 |    45 |    -2 |  271 | ▉▉▉▉▉▉▉▉▉▉        |
 |    40 |    -8 |  265 | ▉▉▉▉▉▉▉▉▉▍        |
 |    35 |   -22 |  251 | ▉▉▉▉▉▉▉▉          |
 |    30 |   -37 |  236 | ▉▉▉▉▉▉▍           |
 |    25 |   -46 |  227 | ▉▉▉▉▉▍            |
 |    20 |   -56 |  217 | ▉▉▉▉▍             |
 |    12 |   -56 |  217 | ▉▉▉▉▍             |
 |    10 |   -49 |  224 | ▉▉▉▉▉▏            |
 |     5 |   -18 |  255 | ▉▉▉▉▉▉▉▉▎         |
 |     0 |    15 |  288 | ▉▉▉▉▉▉▉▉▉▉▉▊      |
#+TBLFM: $4=$2+273
#+TBLFM: $4='(orgtbl-uc-draw-grid $3 175 290)

On repère les tendances discutées au premmier cours, les creux et les bosses correspondant aux /minima/ et /maxima/ locaux. Des valeurs identiques pourraient indiquer des bandes stationnaires mais l'échantillonage est insuffisant pour trancher.

Le tableau de données est saisi à la main puis commenté en groupe : 

+  << il fait froid >> : en effet la température $T$ est  toujours (vraiment ?) négative au delà de 5 km
+ à l'évidence, $T$ n'est connue qu'en certaines altitudes, espacées de manière /irrégulière/
+ depuis le sol, des tendances sont identifiables : $\searrow$ , $\nearrow$ , $\searrow$ , $\nearrow$
+ des mesures font apparaître des valeurs identiques (stagnation ?)
+ les étudiants se demandent alors si cela ne posera pas de problème numérique (ce point à été traité en détail à l'oral en TP ...)

Attention, la conversion en Kelvin peut-être source d'erreurs ! Pour nos calculs, on prendra garde à bien vérifier que le zero absolu correspond à une température de $-273~C$ c-à-d que : 

$$T(K) = T(C) + 273 $$


* TP Sondage Atmosphérique - [ correction ]

** Préparatifs
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

 - Importer des librairies (on se limite aux lib standards)
 - Fixer les valeurs des constantes physiques
 - Attention aux unités $km$ (non SI) et $kg$ (SI)
 - Saisir les tableaux de valeurs de température
 - Tester collectivement l'execution d'un même bout de code


Ici nous avons fait le choix du mode Python (version 3) édité via Jupyter-Emacs.



#+BEGIN_SRC jupyter-python :results output raw :exports both
import numpy as np
import matplotlib
import matplotlib.pyplot as plt

#Constantes
pi = np.pi ; M = 29.0e-3 ; R = 8.31

RT = 6.4e3  ; RT_m = 6.4e6
P0 = 1.0e5  ; g0 = 9.8
#Cte = 

#Altitude en km
zexp = np.array([0.0, 5.0, 10.0, 12.0, 20.0, 25.0, 30.0,35.0, 40.0,
                 45.0, 48.0, 52.0, 55.0, 60.0, 65.0, 70.0, 75.0, 80.0, 84.0, 92.0, 95.0,100.0])

#Température en degrés celcius
Texp = np.array([15.0, -18.0, -49.0, -56.0, -56.0, -51.0, -46.0, -37.0,
                 -22.0, -8.0, -2.0, -2.0, -7.0, -17.0, -33.0, -54.0, -65.0, -79.0, -86.0,-86.0, -81.0, -72.0])


 #+END_SRC

 #+RESULTS:

On réalise un premier graphique, ocasion de vérfier la bonne saisie des valeurs : 

#+BEGIN_SRC jupyter-python
fig, ax = plt.subplots()
ax.plot( Texp,zexp)
plt.show()
plt.savefig("graph_Q0.png")
#+END_SRC


 #+RESULTS:
 :RESULTS:
 [[file:./.ob-jupyter/a60bc0e706dedf58e67f07c07108a1cd231a7778.png]]
 <Figure size 432x288 with 0 Axes>
 :END:



*NB* : les lignes de code seront susceptibles d'être remaniées et/ou commentées en fonction de vos retours.

Les tags ~TABLEAU~ et ~CODE~ rappellent lorsque les questions ont été traités "au tableau" en résolvant les équations à la main ou via des scripts (Python ou Matlab) sur les machines. Les tags ~EXAM~ signalent les quelques sections qu'il est indispensable de maîtriser pour l'examen.


** Q.01 - écriture de la formule d'interpolation -             :TABLEAU:EXAM:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

Un travail de reformulation de la question est fait avec les étudiants.

Considérons un intervalle $Z_{i}$ = $\left[ z_{i} ~; z_{i+1} \right]$. On place sur un schéma deux points successifs $M_{i} \left( z_i,T_i \right)$ et $M_{i+1} \left ( z_{i+1}, T_{i+1} \right)$. Réaliser une /interpolation linéaire/ revient à : 

+ déterminer la droite joignant ces deux points (i.e quelle est son équation ?) 
+ générer un ensemble points appartenant à cette droite à l'aider d'un script

Pour guider la résolution, nous avons répondu à l'oral aux questions suivantes:

a. Que vaut la température correspondant à un point milieu de cet intervalle ?
b. De combien de paramètres dépend la fonction d'interpolation affine $T(z)$ sur l'intervalle $Z_{i}$ ?
c. Exprimer les paramètres en fonction des données mesurées aux points $M_{i}(z_i,T_i)$ et $M_{i+1}(z_{i+1}, T_{i+1})$. 

Remarque : Dans ce cas simple, on peut trouver facilement la solution par tatônnements. On pourra sinon poser proprement un système d'équations, avec autant d'équations que d'inconnues (méthode qui s'avérera toujours payante pour les techniques d'interpolation plus sophistiquée).

*NB* (en vue de l'examen) : tous les élèves présents au TP ont réussi à réaliser l'interpolation en Python ou en Matlab/Octabe (temps de réalisation moyen pour un programme sans bug ~1h). Un corrigé a été réalisé au tableau. Il est donc attendu que vous sachiez expliquer simplement le travail réalisé. 


** Q.02 - écriture de la fonction d'interpolation de température - :CODE:EXAM:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

Partant des mesures d'altitude fournies et en faisant attention au choix des unités (source de nombreuses erreurs), on implémente le bout de code artisanal suivant (nous vous invitons à améliorer son écriture ...)


 #+BEGIN_SRC jupyter-python :results output raw :exports both
# interpolation
def T(z, unite):
    z_km = z / 1000 # Conversion en km pour comparaison dans la liste
    alpha = 1 # Valeur par défaut pour la conversion en K
    if unite == 'C':
        alpha = 0 # Pas de décalage pour la température en °C
    i = 0
    while z_km > zexp[i + 1]: # Recherche de l’indice i
        i = i + 1
    temperature = alpha*273 + Texp[i] + (z_km - zexp[i])/(zexp[i + 1] - zexp[i])*(Texp[i + 1] - Texp[i]) # Interpolation linéaire
    return temperature
 #+END_SRC

 #+RESULTS:

** Q.03 - remplissage des tableaux zatm et Tatm -                      :CODE:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

On calcule $N$ altitudes régulièrement réparties entre 0 et 100 km avec leur températures correspondantes : 

 #+BEGIN_SRC jupyter-python :results output raw :exports both
N = 100 # Nombre de points
zmax = 100.0e3 # Altitude max (en m)
dz = zmax/(N-1) # Pas spatial (en m)

zatm = np.array([k*dz for k in range(N)]) # Altitudes
Tatm = np.array([T(zatm[k], 'K') for k in range(N)]) # Températures

TexpC = Texp + 273
zexpm = zexp * 1e3
 #+END_SRC

 #+RESULTS:


** Q.04 - tracé du profil de température de l'atmosphère -             :CODE:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

On réalise le graphe et on vérifie la justesse de l'interpolation (vert) par l'ajout des points de mesure (rouges).



 #+BEGIN_SRC jupyter-python :results output raw :exports both
fig, ax = plt.subplots()
ax.plot( TexpC,zexpm,'ro')
ax.plot( Tatm,zatm,'-g')
plt.savefig("graph_Q4.png")
 #+END_SRC

 #+RESULTS:
 [[file:./.ob-jupyter/19886f271eb3c875f57ce89f1189a6f128fe408a.png]]

On distingue les différentes couches.

Je vous laisse le soin de retrouver les intervalles en z correspondants : 

| troposphère  | stratosphère  | mesosphère    | thermosphère  |
|--------------+---------------+---------------+---------------|
| [ ... ; ...] | [ ... ; ... ] | [ ... ; ... ] | [ ... ; ... ] |


*** TODO petit plus
Un étudiant à réalisé un joli graphe permettant d'identifier les couches.
Il pourrait être ajouté ci après.





** Q.05 - masse volumique                                      :TABLEAU:EXAM:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

On a montré en séance que : 

$$\rho(z)= \frac{M P(z)}{R T(z)} $$ 

Question classique, nécéssitant de manipuler /l'équation des gaz parfaits/ couplée aux définitions des /masses molaires/ et /masses volumiques/.

*NB* : petit topo méthodo

+ Quelques difficultés à retrouver la formule rapidement ! Pour y remédier, des techniques ont été présentées. Penser qu'on connait par avance "la forme algébrique" du résultat (rapport de produits de parmètres). Cela implique de jouer avec les unités ... 

+ Cette question vous invite à faire usage de votre bon sens physique :  la masse volumique augmente-t-elle ou diminue-t-elle lorsque la température augmente ? /idem/ en fonction la pression ?

+ A savoir traiter à l'examen !

Remarque : Dans ce problème, les grandeurs ne sont pas uniformes ! On adopte une description locale de l'atmosphère en utilisant un jeu de variables intensives  $P$, $T$ et $\rho$. Ce sont les inconues du problème. Un traitement rigoureux de cette aspect technique est réalisé dans le manuel de Thermodynamique de Vincent Renvoizé (Ellipses, 2005).


** Q.06 - équation différentielle du champ de pression         :TABLEAU:EXAM:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  


Un autre classique, le fameux " Grad de P égal ROGER " (moyen mnémotechnique) : 

$$ \vec{\nabla} P = \rho \vec{g}$$

On peut s'entrainer à retrouver ce résultat en faisant un petit bilan des forces (pression & gravité) exercées sur une tranche d'air d'épaisseur $dz$ et de section $S$ : 

On a en dessous, une force de norme 

$$ p(z) S $$ 

Et au dessus, en $z+dz$ une force de norme dessus 

$$ p(z+dz) S $$

Le poids a pour intensité $$ \rho (z) ~S~dz~g $$ 

Il s'applique au centre de gravité et équilibre les forces de pression 

$$ p(z+dz) -p(z) = - \rho g  dz $$

qui se réécrit, en passant à la limite quand $dz$ tend vers 0 : $$ dp/dz = -\rho g $$ soit en explicitant la masse volumique  $\rho$ qui elle même dépend de la pression ...

$$ \frac{dP}{dz} + \frac{M g(z)}{R T(z)} p(z) = 0 $$

Remarque : cette équation peut se réécrire, en posant $\zeta = ln(P)$. (utile pour estimer des taux de var)

$$ \frac{d\zeta}{dz} = - \frac{M g(z)}{R T(z)} $$


** Q.07
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

On intègre l'équation différentielle précédente. Il ne vous aura pas échappé que la température varie avec l'altitude. Il faut donc en toute rigueur en tenir compte et mettre à jour la valeur de $T$ dans la boucle d'intégration.

Même remarque pour le champ de pesanteur qui varie lui aussi avec $z$ (la démonstration de cette formule a par application du théorème de Gauss a d'ailleurs faite en TD).

 #+BEGIN_SRC jupyter-python :results output raw :exports both
def g1(z): # Champ de pesanteur
    # RT est en km et z est en km
    return g0 * RT**2 / (RT + z)**2
 #+END_SRC

 #+RESULTS:

#+BEGIN_SRC jupyter-python :results output raw :exports NONE
def g2(z): # Champ de pesanteur
    # RT est en m et z est en m
    return g0 * RT_m**2 / (RT_m + z)**2

# on pourra vérfier que cela n'a pas d'incidence ...
#+END_SRC

 #+RESULTS:

 #+BEGIN_SRC jupyter-python :results output raw :exports both
# Calcul du champ de pression par la méthode d’Euler
Patm = [P0] # Initialisation
for k in range(N - 1): # Il reste N - 1 termes à calculer
    zval = zatm[k]
#    print(zval)
    Patm.append( Patm[k] - M * g2(zval) * Patm[k] * dz /(R*T(zval, 'K')))

    
    print(k,RT_m,dz,zval,Patm[k])


    
#    print(g1(zval))
Patm = np.array(Patm) # Conversion de la liste en tableau
 #+END_SRC

 #+RESULTS:
 0 6400000.0 1010.10101010101 0.0 100000.0
 1 6400000.0 1010.10101010101 1010.10101010101 88005.1349164867
 2 6400000.0 1010.10101010101 2020.20202020202 77202.30348704716
 3 6400000.0 1010.10101010101 3030.30303030303 67498.58867610412
 4 6400000.0 1010.10101010101 4040.40404040404 58806.25104339166
 5 6400000.0 1010.10101010101 5050.50505050505 51042.55789155615
 6 6400000.0 1010.10101010101 6060.60606060606 44130.16265700278
 7 6400000.0 1010.10101010101 7070.707070707071 38005.1460426288
 8 6400000.0 1010.10101010101 8080.80808080808 32595.53713031624
 9 6400000.0 1010.10101010101 9090.90909090909 27834.255130538837
 10 6400000.0 1010.10101010101 10101.0101010101 23658.89555558609
 11 6400000.0 1010.10101010101 11111.111111111111 20015.968404858853
 12 6400000.0 1010.10101010101 12121.21212121212 16885.4530632168
 13 6400000.0 1010.10101010101 13131.31313131313 14207.53465714382
 14 6400000.0 1010.10101010101 14141.414141414141 11955.025690379252
 15 6400000.0 1010.10101010101 15151.51515151515 10060.233780991892
 16 6400000.0 1010.10101010101 16161.61616161616 8466.255843087163
 17 6400000.0 1010.10101010101 17171.71717171717 7125.2555646246865
 18 6400000.0 1010.10101010101 18181.81818181818 5997.016341538385
 19 6400000.0 1010.10101010101 19191.91919191919 5047.7255462221665
 20 6400000.0 1010.10101010101 20202.0202020202 4248.953087383648
 21 6400000.0 1010.10101010101 21212.121212121212 3577.4183374180107
 22 6400000.0 1010.10101010101 22222.222222222223 3014.8119904782475
 23 6400000.0 1010.10101010101 23232.32323232323 2543.0175670256044
 24 6400000.0 1010.10101010101 24242.42424242424 2147.005114456985
 25 6400000.0 1010.10101010101 25252.52525252525 1814.2929868643687
 26 6400000.0 1010.10101010101 26262.62626262626 1534.5056085271328
 27 6400000.0 1010.10101010101 27272.727272727272 1299.0097283739196
 28 6400000.0 1010.10101010101 28282.828282828283 1100.6149282986885
 29 6400000.0 1010.10101010101 29292.92929292929 933.3267854948461
 30 6400000.0 1010.10101010101 30303.0303030303 792.143227671052
 31 6400000.0 1010.10101010101 31313.13131313131 673.0134111320374
 32 6400000.0 1010.10101010101 32323.23232323232 572.633306097543
 33 6400000.0 1010.10101010101 33333.33333333333 487.92324163965026
 34 6400000.0 1010.10101010101 34343.43434343434 416.3301232773807
 35 6400000.0 1010.10101010101 35353.53535353535 355.73391609706545
 36 6400000.0 1010.10101010101 36363.63636363636 304.46326116547857
 37 6400000.0 1010.10101010101 37373.73737373737 261.1495060371151
 38 6400000.0 1010.10101010101 38383.83838383838 224.47226057515786
 39 6400000.0 1010.10101010101 39393.93939393939 193.3440438907779
 40 6400000.0 1010.10101010101 40404.0404040404 166.86683135233088
 41 6400000.0 1010.10101010101 41414.14141414141 144.28990537425256
 42 6400000.0 1010.10101010101 42424.242424242424 124.99023263741617
 43 6400000.0 1010.10101010101 43434.343434343435 108.46061734382907
 44 6400000.0 1010.10101010101 44444.444444444445 94.27710744975224
 45 6400000.0 1010.10101010101 45454.54545454545 82.08457164272464
 46 6400000.0 1010.10101010101 46464.64646464646 71.57054546378708
 47 6400000.0 1010.10101010101 47474.74747474747 62.47520999973315
 48 6400000.0 1010.10101010101 48484.84848484848 54.59761391906603
 49 6400000.0 1010.10101010101 49494.94949494949 47.74215065509645
 50 6400000.0 1010.10101010101 50505.0505050505 41.74936040896459
 51 6400000.0 1010.10101010101 51515.15151515151 36.51045086781621
 52 6400000.0 1010.10101010101 52525.25252525252 31.930379289828064
 53 6400000.0 1010.10101010101 53535.35353535353 27.91313398708749
 54 6400000.0 1010.10101010101 54545.454545454544 24.380390998737745
 55 6400000.0 1010.10101010101 55555.555555555555 21.276257572951522
 56 6400000.0 1010.10101010101 56565.656565656565 18.54908855180122
 57 6400000.0 1010.10101010101 57575.757575757576 16.153962477990678
 58 6400000.0 1010.10101010101 58585.85858585858 14.052606959650243
 59 6400000.0 1010.10101010101 59595.95959595959 12.210910314448236
 60 6400000.0 1010.10101010101 60606.0606060606 10.598496720439364
 61 6400000.0 1010.10101010101 61616.16161616161 9.184305221619816
 62 6400000.0 1010.10101010101 62626.26262626262 7.943409480161715
 63 6400000.0 1010.10101010101 63636.36363636363 6.856500646586492
 64 6400000.0 1010.10101010101 64646.46464646464 5.9062024302604605
 65 6400000.0 1010.10101010101 65656.56565656565 5.076899955882727
 66 6400000.0 1010.10101010101 66666.66666666666 4.352582769413613
 67 6400000.0 1010.10101010101 67676.76767676767 3.720494151208412
 68 6400000.0 1010.10101010101 68686.86868686868 3.1703502163572543
 69 6400000.0 1010.10101010101 69696.9696969697 2.6928460880421654
 70 6400000.0 1010.10101010101 70707.0707070707 2.279579088722883
 71 6400000.0 1010.10101010101 71717.17171717172 1.9252957963853574
 72 6400000.0 1010.10101010101 72727.27272727272 1.623078653354077
 73 6400000.0 1010.10101010101 73737.37373737374 1.365723334290827
 74 6400000.0 1010.10101010101 74747.47474747474 1.1469594845082371
 75 6400000.0 1010.10101010101 75757.57575757576 0.9613379121355667
 76 6400000.0 1010.10101010101 76767.67676767676 0.8037833054792682
 77 6400000.0 1010.10101010101 77777.77777777777 0.670257233695635
 78 6400000.0 1010.10101010101 78787.87878787878 0.5573751688131706
 79 6400000.0 1010.10101010101 79797.97979797979 0.4621889481316378
 80 6400000.0 1010.10101010101 80808.0808080808 0.3821358317067111
 81 6400000.0 1010.10101010101 81818.18181818181 0.315288688823679
 82 6400000.0 1010.10101010101 82828.28282828283 0.2596415613485533
 83 6400000.0 1010.10101010101 83838.38383838383 0.21340184758516223
 84 6400000.0 1010.10101010101 84848.48484848485 0.17505023259746716
 85 6400000.0 1010.10101010101 85858.58585858585 0.1435532303182595
 86 6400000.0 1010.10101010101 86868.68686868687 0.1177315669098593
 87 6400000.0 1010.10101010101 87878.78787878787 0.09656117452684332
 88 6400000.0 1010.10101010101 88888.88888888889 0.07920303074194138
 89 6400000.0 1010.10101010101 89898.9898989899 0.06496967442182246
 90 6400000.0 1010.10101010101 90909.0909090909 0.0532977890903985
 91 6400000.0 1010.10101010101 91919.19191919192 0.0437257527816615
 92 6400000.0 1010.10101010101 92929.29292929292 0.03587525344864476
 93 6400000.0 1010.10101010101 93939.39393939394 0.02948912555594218
 94 6400000.0 1010.10101010101 94949.49494949494 0.02428786124653674
 95 6400000.0 1010.10101010101 95959.59595959596 0.020042890198325967
 96 6400000.0 1010.10101010101 96969.69696969696 0.016573678869528607
 97 6400000.0 1010.10101010101 97979.79797979798 0.01373250824740759
 98 6400000.0 1010.10101010101 98989.89898989898 0.01140080208874268


On réalise ensuite le graphe du champ de pression en fonction de $z$. C'est une intégration "facile" mais coûteuse : on peut vérifier que la précision augmente avec $N$ au prix d'un temps de calcul considérablemetn accru ...

#+BEGIN_SRC jupyter-python
print(zatm[99]/1e3)
print(Patm[50])
#+END_SRC

#+RESULTS:
:RESULTS:
100.0
41.74936040896459
:END:

 #+BEGIN_SRC jupyter-python :results output raw :exports both
fig, ax = plt.subplots()
ax.plot( Patm,zatm)
plt.savefig("graph_Q7.png")
 #+END_SRC

 #+RESULTS:
 [[file:./.ob-jupyter/f0365e7ea7faf2311103bc0a9939ba4135ed38f0.png]]

Remarque : il pourrait être intéressant de réaliser une petite étude de "scaling" pour mesurer la dépendance du temps de calcul avec $N$ ...

** Q.08 - calcul de la masse totale de l'atmosphère               :CODE:EXAM:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

On exprime la masse d’air contenue dans le volume élémentaire d’atmosphère d
situé entre les sphères d’altitudes $z$ et $z + dz$ tel que : 

$$ d \tau = 4 \pi (R_T + z )^2 dz $$

Ensuite, puisque $dm = \rho d \tau$, on obtient en remplaçant par la formule de la masse volumique trouvée plus haut : 


$$ m(z) = {\int}_0^z 4 \pi (R_T + z )^2  \frac{M p(z)}{R T(z)} dz$$ 

Voici, un exemple de code Python pour calculer cette intégrale par la méthode des rectangles : 

#+BEGIN_SRC jupyter-python
# Calcul de la masse d’air jusqu’à l’altitude z
def masse_atm(z):
    masse = 0
    k = 0
    while zatm[k] < z: # On arrête le calcul à l’altitude z
        dm = 4*np.pi*(RT_m+zatm[k])**2*M*Patm[k]/(R*T(zatm[k], 'K')) * dz
        masse = masse + dm
        k = k + 1
    return masse
#+END_SRC

#+RESULTS:

On a supposé le champ de pensanteur uniforme.

Inclure une question sur la variation relative de g avec z

 #+BEGIN_SRC jupyter-python :results output raw :exports both
# evaluation de la fonction masse
mtot = masse_atm(100e3) # Masse d'air dans l'atmosphère terrestre
print('Masse de l\'atmosphère :', mtot, 'kg')
 #+END_SRC

 #+RESULTS:
 Masse de l'atmosphère : 5.273391114020367e+18 kg
 Masse de l'atmosphère : 5.273391114020367e+18 kg
 Masse de l'atmosphère : 5.26276756718815e+18 kg

 #+BEGIN_SRC jupyter-python  
# evaluation de la fonction masse
mtropo = masse_atm(5e3) # Masse d'air dans la troposphère
print('Proportion d\'air dans la troposphère :', mtropo/mtot)
 #+END_SRC

 #+RESULTS:
 :RESULTS:
 Proportion d'air dans la troposphère : 0.48815941702863264
 :END:



** Q.09                                                             :TABLEAU:
:PROPERTIES:  
:UNNUMBERED: t  
:END: 

#+BEGIN_SRC jupyter-python
(g1(10)-g1(0))/g1(0)
#+END_SRC

#+RESULTS:
:RESULTS:
-0.0031176910102925326
:END:



On recalcule la pression en supposant $g$ uniforme : 

 #+BEGIN_SRC jupyter-python :results output raw :exports both
Patm2 = [P0]
for k in range(N - 1):
    Patm2.append(Patm2[k] - M*g0*Patm2[k]*dz/(R*T(zatm[k], 'K')))
Patm2 = np.array(Patm2)
ecart1 = 100 * abs(Patm - Patm2) / Patm # Ecart relatif
 #+END_SRC

 #+RESULTS:

 #+BEGIN_SRC jupyter-python :results output raw :exports both
fig, ax = plt.subplots()
ax.plot( ecart1,zatm)
plt.savefig("graph_Q9.png")
 #+END_SRC

 #+RESULTS:
 [[file:./.ob-jupyter/d14a95cd682907201ffefe8d8987a9a30ea2044c.png]]



** Q.10                                                                :CODE:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  


 #+BEGIN_SRC jupyter-python :results output raw :exports both
Piso = [P0]
for k in range(N - 1):
    Piso.append(Piso[k] - M*g0*Piso[k]*dz/(R*T(0, 'K')))
Piso = np.array(Piso)
ecart2 = 100 * abs(Piso - Patm) / Patm # Ecart relatif
 #+END_SRC

 #+RESULTS:

 #+BEGIN_SRC jupyter-python :results output raw :exports both
fig, ax = plt.subplots()
ax.plot( ecart2,zatm)
plt.savefig("graph_Q10.png")
 #+END_SRC

 #+RESULTS:
 [[file:./.ob-jupyter/f075d877e5e5013d71e97ad2f82313a895a6e103.png]]


** Q.11                                                             :TABLEAU:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  

Le champ de pression satisfait l'équation différentielle simplifiée (cas isotherme) : 
$

$$ \frac{dP}{dz} + \frac{M g_0}{R T_0} p(z) = 0$$ 

Cette équation s'intègre classiquement ainsi en posant $H = RT/Mg$ : 

$$ p(z) = P_0 e^{-z/H}$$

*Note* : Je vous laisse le soin de réaliser l'application numérique que nous vérifierons au prochain debrief.

#+BEGIN_SRC jupyter-python
H = R*T(0,'K')/(M*g0)
print(H)
#+END_SRC

#+RESULTS:
:RESULTS:
8421.111893033076
:END:


Application numérique : 

$$ H = $$

** Q.12                                                                :CODE:
:PROPERTIES:  
:UNNUMBERED: t  
:END:  


 #+BEGIN_SRC jupyter-python :results output raw :exports both
ztropo, Ttropo = [], [] # Initialisation des listes
k = 0
while zatm[k] < 10e3: # On sélectionne les données jusqu’à 10km
    ztropo.append(zatm[k])
    Ttropo.append(T(zatm[k], 'K'))
    k = k + 1 # NB:: On a pris en fait 1 point sur 5 pour le graphe
# Régression linéaire T(z)=a*z+b
a, b = np.polyfit(ztropo, Ttropo, 1) # Calcul de la régression linéaire
Tlin = [a*z + b for z in ztropo] # Modèle linéaire de la température


print(a,b)
 #+END_SRC

 #+RESULTS:
 -0.006427272727272727 287.62901744719915
 -0.006402700270027003 287.5138802168507


 #+BEGIN_SRC jupyter-python :results output raw :exports both
Pgradient = [P0]
for k in range(len(ztropo) - 1):
    Pgradient.append(Pgradient[k] - M*g0*Pgradient[k]*dz/(R*(a*zatm[k] + b)))
Pgradient = np.array(Pgradient)
ecart3 = 100 * abs(Pgradient - Patm) / Patm
 #+END_SRC


 #+BEGIN_SRC jupyter-python :results output raw :exports both
fig, ax = plt.subplots()
ax.plot( ecart3,zatm)
plt.savefig("graph_Q12.png")
 #+END_SRC

#+BEGIN_SRC jupyter-python
fig, ax = plt.subplots()
ax.plot( Patm,zatm)
ax.plot( Patm2,zatm)
plt.savefig("graph_Q13.png")
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/b7f621ed67c3e95f0eff8a9e43d9e278468a17c6.png]]o
:END:



#+BEGIN_SRC emacs-lisp :exports none
(defvar yt-iframe-format
  ;; You may want to change your width and height.
  (concat "<iframe width=\"440\""
          " height=\"335\""
          " src=\"https://www.youtube.com/embed/%s\""
          " frameborder=\"0\""
          " allowfullscreen>%s</iframe>"))

(org-add-link-type
 "yt"
 (lambda (handle)
   (browse-url
    (concat "https://www.youtube.com/embed/"
            handle)))
 (lambda (path desc backend)
   (cl-case backend
     (html (format yt-iframe-format
                   path (or desc "")))
     (latex (format "\href{%s}{%s}"
                    path (or desc "video"))))))
#+END_SRC

#+RESULTS:
: Created yt link.


[[yt:A3JAlWM8qRM]]

* Exercice Formation d'un nuage - [ optionnel ]                       :BONUS:

*Remarque* : Cet exercice était initialement prévu pour constituer un devoir maison. Nous avons décidé de ne l'évaluer cette année en raison de la charge de travail due aux rapports de TP.


On souhaite expliquer la formation d'un nuage d'une manière simplifiée en envisageant les mécanismes thermodynamiques responsables du phénomène. Ici nous faisons l'hypothèse que l'apparition d'un nuage est d'abord conditionnée par un déplacement adiabatique de masses d’air. \footnote{On ommet volontairement certains phénomènes subtiles de nucléation dans cette première approche.}

Cet exercice vous propose tout d'abord d'étudier la physique responsable de la création d’un courant ascendant pouvant conduire à la formation d'un nuage sous certaines conditions.

Un point de l'atmosphère est repéré par ses coordonnées cartésiennes (Oxyz), tel que l'axe (Oz) coïncide avec la verticale ascendante avec $z=0$ pris au niveau de la mer. Par comodité, nous garderons les notations et valeurs numériques des constantes physiques utilisées pour le TP.

** En l'abscence de mouvement (équilibre)

Des relevés expérimentaux montrent qu'en l'absence de mouvement de l'air, la température est fonction de l'altitude $z$ suivant une loi affine : 

$$ T(z) = T_{0} - \lambda z $$

*Q1*. (1 pt) Sur quelle intervalle de z cette approximation est-elle valable ?

Avec les hypothèse thermodynamiques faites en début d'exercice, on peut montrer que $P$ et $T$ sont liées par une relation de la forme : 

$$ T =T_0 \left( \frac{P}{P_0}  \right)^{q} $$

*Q2*. (2 pt) Réaliser à nouveau la démonstration de cette relation.

*Q3*. (1 pt) Déterminer l’exposant $q$ qui s'exprime uniquement en fonction de $M$, $g_0$, $\lambda$ et $R$. Faites l'application numérique pour une valeur convenablement choisie de $\lambda$.


** Apparition d'un mouvement (instabilté)

L'état d'équilibre précédent est réalisé lorsque les isothermes (niveaux où $T=Cte$) et les isobares ($P=Cte$) coïncident avec les équipotentielles du champ de pesanteur ($z = cte$)\footnote{les spécialistes parlent de configurations barotropes et baroclines}. En présence d’hétérogénéités de température au niveau du sol, l'air s'échauffe différemment et peut se mettre en mouvement, c'est un phénomène bien connu ! 

\bigskip

#+NAME: fig:nuage1
#+CAPTION: 
# #+ATTR_ORG: :width 100
# #+ATTR_HTML: :width 100
# #+ATTR_LATEX: :float wrap :width 0.38\textwidth :placement {r}{0.4\textwidth}
#+caption:
[[./Ex2a.png]]

On se place à l'altitude $z$ à la verticale du point $Q$ et on suppose que l'air est localement plus chaud que l'air avoisinant. Tout se passe comme si une poche de gaz était limitée par une enveloppe souple et non tendue. On convient des hypothèses et notations suivantes : 

- La bulle de gaz évolue sans échanger de matière ni de chaleur avec l'extérieur. 

- La *pression de la bulle* reste égale à celle de l'air environnant à la même altitude.

- La *température de l'air* environnant varie toujours linéairement avec la température.

- On note $P_B$, $T_B$ et $\rho_B$ la pression, la température et la masse volumique du gaz emprisonné dans la bulle. On note $T_A$ et $\rho_A$ la température et la masse volumique de l'air environnant à la même altitude.

*Q4*. (2 pt) Montrer que la bulle s'élève si $T_B > T_A$.

Les questions suivantes nécéssitent la manipulation de quelques relations de thermodynamique. Le gaz emprisonné dans la bulle subit une transformation dite *adiabatique*. De plus, comme souvent en thermo on supposera la transformation *réversible* (ce n'est pas rigouresuememnt vrai  mais c'est plus facile à résoudre ainsi).

Appellons $T_1$ la température du gaz dans la bulle à l'altitude de sa formation $z_1$ et $P_1$ la pression correspondante.

*Q5*. (2 pt) En retrouvant une des 3 formes de l'expression de la *loi de Laplace* pour les gaz parfaits, exprimer $T_B$ en fonction de $T_1$, $P_1$ et $P_B$. En cas de difficulté, n'hésitez pas à consulter des ressources sur ce sujet pour cette question théorique (reformulez et citez vos sources). 

*Q6*. (2 pt) On veut démontrer qu'il existe une altitude plafond ${z^{\star}$ pour l'ascension de la bulle. On note $T^{\star}$ et $P^{\star}$ la température et la pression de la bulle lorsqu'elle arrive à cette altitude. Evaluer numériquement $T^{\star}$ et $P^{\star}$ pour $T_1 = 280 K$ et $z_1 = 2 km$. En déduire la valeur de l'altitude plafond $z^{\star}$ à laquelle se stabilise la bulle.

Pour cette question, on vous demande de rédiger soigneusement une explication du phénomène de stabilisation de la bulle d'air.


** Explication qualitative de la formation d'un nuage.

*Q7* (5 pt) Nous faisions l'hypothèse d'un air sec dans la partie précédente. Maintenant nous envisageons une parcelle d'air /humide/ (air sec + vapeur d'eau). 

a. Proposer une explication qualitative de la possibilité de formation d'un nuage au cours de l'ascension d'une bulle. 

b. Réaliser un schéma légendé, si possible au format A3 \footnote{2 feuilles A4 accolées feront l'affaire}, présentant une illustration vulgarisée de la formation d'un nuage telle qu'on peut la comprendre *d'après le mécanisme illustré par cet exercice*.

c. Au besoin, ajouter quelques détails supplémentaire (avec une autre couleur) signalant d'autres phénomènes pouvant rentrer en jeu dans le mécanisme de formation d'un nuage.
